@using System.Reflection
@using System.Resources
@using System.Globalization
@model List<Equipment>
@{
    string GetLocalizedString(string key) 
    {
        try 
        {
            var resourceManager = new ResourceManager("GPIMSWeb.Resources.SharedResource", Assembly.GetExecutingAssembly());
            return resourceManager.GetString(key, CultureInfo.CurrentUICulture) ?? key;
        }
        catch 
        {
            return key;
        }
    }
    
    ViewData["Title"] = GetLocalizedString("EquipmentUpdate");
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="fas fa-download"></i> @GetLocalizedString("EquipmentProgramUpdate")</h2>
    <a href="@Url.Action("Index", "Home")" class="btn btn-outline-secondary">
        <i class="fas fa-arrow-left"></i> @GetLocalizedString("BackToDashboard")
    </a>
</div>

<div class="row">
    @foreach (var equipment in Model)
    {
        <div class="col-lg-6 col-md-12 mb-4">
            <div class="card @(equipment.IsOnline ? "border-success" : "border-danger")">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-server"></i> @equipment.Name
                    </h5>
                    <span class="badge @(equipment.IsOnline ? "bg-success" : "bg-danger")">
                        @GetLocalizedString(equipment.IsOnline ? "Online" : "Offline")
                    </span>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-6">
                            <small class="text-muted">@GetLocalizedString("CurrentVersion"):</small><br>
                            <strong>@equipment.Version</strong>
                        </div>
                        <div class="col-6">
                            <small class="text-muted">@GetLocalizedString("Status"):</small><br>
                            <span class="badge bg-@(equipment.Status == EquipmentStatus.Idle ? "secondary" : 
                                equipment.Status == EquipmentStatus.Running ? "primary" : 
                                equipment.Status == EquipmentStatus.Error ? "danger" : "warning")">
                                @GetLocalizedString(equipment.Status.ToString())
                            </span>
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-12">
                            <small class="text-muted">@GetLocalizedString("LastUpdate"):</small><br>
                            @equipment.LastUpdateTime.ToString("yyyy-MM-dd HH:mm:ss")
                        </div>
                    </div>

                    <div class="progress mb-3" id="progress-@equipment.Id" style="display: none;">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" 
                             role="progressbar" style="width: 0%">
                            <span class="progress-text">0%</span>
                        </div>
                    </div>

                    <div class="d-grid">
                        @if (equipment.IsOnline && equipment.Status == EquipmentStatus.Idle)
                        {
                            <button class="btn btn-primary" onclick="updateEquipment(@equipment.Id)" 
                                    id="update-btn-@equipment.Id">
                                <i class="fas fa-download"></i> @GetLocalizedString("UpdateToVersion") v2.2.0
                            </button>
                        }
                        else if (!equipment.IsOnline)
                        {
                            <button class="btn btn-secondary" disabled>
                                <i class="fas fa-exclamation-triangle"></i> @GetLocalizedString("EquipmentOffline")
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-warning" disabled>
                                <i class="fas fa-clock"></i> @GetLocalizedString("EquipmentBusy")
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (!Model.Any())
{
    <div class="text-center py-5">
        <i class="fas fa-server fa-3x text-muted mb-3"></i>
        <h4 class="text-muted">@GetLocalizedString("NoEquipmentFound")</h4>
        <p class="text-muted">@GetLocalizedString("NoEquipmentConfigured")</p>
    </div>
}

@section Scripts {
    <script>
        function updateEquipment(equipmentId) {
            const btn = $(`#update-btn-${equipmentId}`);
            const progress = $(`#progress-${equipmentId}`);
            const progressBar = progress.find('.progress-bar');
            const progressText = progress.find('.progress-text');
            
            if (confirm('@GetLocalizedString("ConfirmUpdateEquipment")')) {
                // 버튼 비활성화
                btn.prop('disabled', true);
                btn.html('<i class="fas fa-spinner fa-spin"></i> @GetLocalizedString("StartingUpdate")');
                
                // 진행 표시줄 표시
                progress.show();
                
                // 시뮬레이션된 진행률 업데이트
                let progressValue = 0;
                const progressInterval = setInterval(() => {
                    progressValue += Math.random() * 15;
                    if (progressValue > 90) progressValue = 90;
                    
                    progressBar.css('width', progressValue + '%');
                    progressText.text(Math.round(progressValue) + '%');
                }, 500);
                
                // 실제 업데이트 요청
                $.post('@Url.Action("UpdateProgram", "Equipment")', { id: equipmentId })
                    .done(function(response) {
                        clearInterval(progressInterval);
                        
                        if (response.success) {
                            // 완료 애니메이션
                            progressBar.css('width', '100%');
                            progressText.text('100%');
                            
                            setTimeout(() => {
                                showNotification('@GetLocalizedString("EquipmentUpdatedSuccessfully")', 'success');
                                btn.html('<i class="fas fa-check"></i> @GetLocalizedString("UpdateComplete")');
                                btn.removeClass('btn-primary').addClass('btn-success');
                                
                                // 3초 후 페이지 새로고침
                                setTimeout(() => {
                                    location.reload();
                                }, 3000);
                            }, 1000);
                        } else {
                            showNotification(response.message || '@GetLocalizedString("UpdateFailed")', 'danger');
                            resetButton(equipmentId);
                        }
                    })
                    .fail(function() {
                        clearInterval(progressInterval);
                        showNotification('@GetLocalizedString("ErrorOccurredDuringUpdate")', 'danger');
                        resetButton(equipmentId);
                    });
            }
        }
        
        function resetButton(equipmentId) {
            const btn = $(`#update-btn-${equipmentId}`);
            const progress = $(`#progress-${equipmentId}`);
            
            btn.prop('disabled', false);
            btn.html('<i class="fas fa-download"></i> @GetLocalizedString("UpdateToVersion") v2.2.0');
            progress.hide();
            progress.find('.progress-bar').css('width', '0%');
            progress.find('.progress-text').text('0%');
        }
        
        function showNotification(message, type) {
            const alertHtml = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            $('.container-fluid main').prepend(alertHtml);
            
            setTimeout(() => {
                $('.alert').first().fadeOut();
            }, 5000);
        }
    </script>
}