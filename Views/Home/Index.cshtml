@using Microsoft.Extensions.Localization
@using GPIMSWeb.Resources
@using System.Reflection
@using System.Resources
@using System.Globalization
@inject IStringLocalizer<SharedResource> Localizer
@model List<Equipment>
@{
    // 직접 ResourceManager 사용하는 함수
    string GetLocalizedString(string key) 
    {
        try 
        {
            var resourceManager = new ResourceManager("GPIMSWeb.Resources.SharedResource", Assembly.GetExecutingAssembly());
            return resourceManager.GetString(key, CultureInfo.CurrentUICulture) ?? key;
        }
        catch 
        {
            return key;
        }
    }
    
    ViewData["Title"] = GetLocalizedString("Dashboard");
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="fas fa-tachometer-alt"></i> @GetLocalizedString("Dashboard")</h2>
    <div class="btn-group" role="group">
        <button type="button" class="btn btn-outline-primary" onclick="refreshData()">
            <i class="fas fa-sync-alt"></i> @GetLocalizedString("Update")
        </button>
    </div>
</div>

<div class="equipment-grid" id="equipmentGrid">
    @foreach (var equipment in Model)
    {
        <div class="equipment-card @(equipment.IsOnline ? "online" : "offline") @(equipment.Status.ToString().ToLower())" 
             data-equipment-id="@equipment.Id">
            <div class="card-body">
                @if (equipment.Alarms.Any())
                {
                    <div class="alarm-indicator">@equipment.Alarms.Count</div>
                }
                
                <div class="equipment-icon @(equipment.IsOnline ? (equipment.Status == EquipmentStatus.Running ? "running" : equipment.Status == EquipmentStatus.Error ? "error" : "online") : "offline")">
                    <i class="fas fa-@(equipment.Status == EquipmentStatus.Running ? "play" : equipment.Status == EquipmentStatus.Error ? "exclamation-triangle" : equipment.IsOnline ? "server" : "power-off")"></i>
                    <div class="status-indicator @(equipment.IsOnline ? "online" : "offline")"></div>
                </div>
                
                <h5 class="equipment-title">@equipment.Name</h5>
                <p class="equipment-subtitle">
                    @GetLocalizedString("Equipment") Station
                    <span class="version-info">
                        <i class="fas fa-tag"></i> @equipment.Version
                    </span>
                </p>
                
                <div class="status-badge @(equipment.IsOnline ? (equipment.Status == EquipmentStatus.Running ? "running" : equipment.Status == EquipmentStatus.Error ? "error" : "online") : "offline")">
                    <i class="fas fa-@(equipment.IsOnline ? "circle" : "times-circle")"></i>
                    @if (equipment.IsOnline)
                    {
                        @GetLocalizedString(equipment.Status.ToString())
                    }
                    else
                    {
                        @GetLocalizedString("Offline")
                    }
                </div>
                
                <div class="equipment-stats">
                    <div class="stat-row">
                        <span class="stat-label">@GetLocalizedString("Channels") @GetLocalizedString("Active")</span>
                        <span class="stat-value">@equipment.Channels.Count(c => c.Status == ChannelStatus.Active)/@equipment.Channels.Count</span>
                    </div>
                    <div class="stat-row">
                        <span class="stat-label">@GetLocalizedString("LastUpdate")</span>
                        <span class="stat-value">@equipment.LastUpdateTime.ToString("yyyy-MM-dd HH:mm:ss")</span>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (!Model.Any())
{
    <div class="text-center py-5">
        <i class="fas fa-server fa-3x text-muted mb-3"></i>
        <h4 class="text-muted">@GetLocalizedString("Equipment") @GetLocalizedString("NotFound")</h4>
        <p class="text-muted">No equipment has been configured yet.</p>
    </div>
}

<style>
    .equipment-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
        gap: 25px;
        margin-top: 20px;
    }

    .equipment-card {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 16px; /* 24px에서 16px로 줄임 */
        padding: 0;
        border: none;
        transition: all 0.3s ease; /* 0.4s에서 0.3s로 줄임 */
        cursor: pointer;
        position: relative;
        overflow: hidden;
        height: 280px; /* 300px에서 280px로 줄임 */
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* 그림자 줄임 */
    }

    .equipment-card:hover {
        transform: translateY(-8px) scale(1.01); /* 애니메이션 줄임 */
        box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15); /* 그림자 줄임 */
    }

    .equipment-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px; /* 6px에서 4px로 줄임 */
        background: linear-gradient(90deg, #28a745, #20c997);
        border-radius: 16px 16px 0 0;
    }

    .equipment-card.offline::before {
        background: linear-gradient(90deg, #dc3545, #fd7e14);
    }

    .equipment-card.error::before {
        background: linear-gradient(90deg, #ffc107, #fd7e14);
    }

    .equipment-card.running::before {
        background: linear-gradient(90deg, #007bff, #6f42c1);
    }

    .equipment-card .card-body {
        padding: 20px; /* 25px에서 20px로 줄임 */
        height: 100%;
        display: flex;
        flex-direction: column;
        position: relative;
    }

    .equipment-icon {
        width: 60px; /* 80px에서 60px로 줄임 */
        height: 60px;
        border-radius: 12px; /* 20px에서 12px로 줄임 */
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 15px; /* 20px에서 15px로 줄임 */
        position: relative;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3); /* 그림자 줄임 */
    }

    .equipment-icon.offline {
        background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
        box-shadow: 0 4px 12px rgba(220, 53, 69, 0.3);
    }

    .equipment-icon.error {
        background: linear-gradient(135deg, #ffc107 0%, #e0a800 100%);
        box-shadow: 0 4px 12px rgba(255, 193, 7, 0.3);
    }

    .equipment-icon.running {
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
        box-shadow: 0 4px 12px rgba(0, 123, 255, 0.3);
    }

    .equipment-icon.online {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);
    }

    .equipment-icon i {
        font-size: 28px; /* 36px에서 28px로 줄임 */
        color: white;
    }

    .status-indicator {
        position: absolute;
        top: -3px; /* -5px에서 -3px로 */
        right: -3px;
        width: 16px; /* 20px에서 16px로 줄임 */
        height: 16px;
        border-radius: 50%;
        border: 2px solid white; /* 3px에서 2px로 줄임 */
        animation: pulse 2s infinite;
    }

    .status-indicator.online {
        background: #28a745;
    }

    .status-indicator.offline {
        background: #dc3545;
        animation: none;
    }

    @@keyframes pulse {
        0% { box-shadow: 0 0 0 0 rgba(40, 167, 69, 0.7); }
        70% { box-shadow: 0 0 0 6px rgba(40, 167, 69, 0); } /* 10px에서 6px로 줄임 */
        100% { box-shadow: 0 0 0 0 rgba(40, 167, 69, 0); }
    }

    .equipment-title {
        font-size: 1.2rem; /* 1.4rem에서 1.2rem으로 줄임 */
        font-weight: 700;
        color: #2c3e50;
        margin-bottom: 6px; /* 8px에서 6px로 줄임 */
        text-align: center;
    }

    .equipment-subtitle {
        color: #7f8c8d;
        font-size: 0.85rem; /* 0.9rem에서 0.85rem으로 줄임 */
        text-align: center;
        margin-bottom: 15px; /* 20px에서 15px로 줄임 */
        display: flex;
        flex-direction: column;
        gap: 3px; /* 4px에서 3px로 줄임 */
    }

    .version-info {
        font-size: 0.7rem; /* 0.75rem에서 0.7rem으로 줄임 */
        color: #95a5a6;
        font-weight: 500;
    }

    .version-info i {
        margin-right: 3px; /* 4px에서 3px로 줄임 */
    }

    .status-badge {
        display: inline-flex;
        align-items: center;
        gap: 6px; /* 8px에서 6px로 줄임 */
        padding: 6px 12px; /* 8px 16px에서 6px 12px로 줄임 */
        border-radius: 20px; /* 50px에서 20px로 줄임 */
        font-weight: 600;
        font-size: 0.8rem; /* 0.85rem에서 0.8rem으로 줄임 */
        margin: 0 auto 12px; /* 15px에서 12px로 줄임 */
    }

    .status-badge.online {
        background: rgba(40, 167, 69, 0.15);
        color: #28a745;
        border: 1px solid rgba(40, 167, 69, 0.3);
    }

    .status-badge.offline {
        background: rgba(220, 53, 69, 0.15);
        color: #dc3545;
        border: 1px solid rgba(220, 53, 69, 0.3);
    }

    .status-badge.running {
        background: rgba(0, 123, 255, 0.15);
        color: #007bff;
        border: 1px solid rgba(0, 123, 255, 0.3);
    }

    .status-badge.error {
        background: rgba(255, 193, 7, 0.15);
        color: #ffc107;
        border: 1px solid rgba(255, 193, 7, 0.3);
    }

    .equipment-stats {
        margin-top: auto;
        padding-top: 12px; /* 15px에서 12px로 줄임 */
        border-top: 1px solid rgba(0, 0, 0, 0.05);
        min-height: 80px; /* 100px에서 80px로 줄임 */
    }

    .stat-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px; /* 10px에서 8px로 줄임 */
        font-size: 0.8rem; /* 0.82rem에서 0.8rem으로 줄임 */
        line-height: 1.3;
    }

    .stat-row:last-child {
        margin-bottom: 0;
    }

    .stat-label {
        color: #7f8c8d;
        font-weight: 500;
    }

    .stat-value {
        color: #2c3e50;
        font-weight: 600;
    }

    .alarm-indicator {
        position: absolute;
        top: 15px; /* 20px에서 15px로 줄임 */
        right: 15px;
        background: #dc3545;
        color: white;
        border-radius: 50%;
        width: 20px; /* 24px에서 20px로 줄임 */
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.7rem; /* 0.75rem에서 0.7rem으로 줄임 */
        font-weight: bold;
        animation: shake 0.5s infinite alternate;
        z-index: 10;
    }

    @@keyframes shake {
        0% { transform: translateX(0); }
        100% { transform: translateX(1px); } /* 2px에서 1px로 줄임 */
    }

    /* 입장 애니메이션 제거하여 성능 향상 */
    .equipment-card {
        opacity: 1; /* 기본값으로 설정 */
    }

    @@media (max-width: 768px) {
        .equipment-grid {
            grid-template-columns: 1fr;
            gap: 15px; /* 20px에서 15px로 줄임 */
        }
        
        .equipment-card {
            height: 240px; /* 280px에서 240px로 줄임 */
        }
        
        .equipment-icon {
            width: 50px; /* 70px에서 50px로 줄임 */
            height: 50px;
        }
        
        .equipment-icon i {
            font-size: 24px; /* 30px에서 24px로 줄임 */
        }
        
        .equipment-title {
            font-size: 1.1rem; /* 1.2rem에서 1.1rem으로 줄임 */
        }
    }

    .equipment-card:active {
        transform: translateY(-4px) scale(0.99); /* 애니메이션 줄임 */
    }
</style>

@section Scripts {
    <script>
        let dashboardConnection;

        // SignalR 연결 설정 - 지연 로딩
        function setupDashboardSignalR() {
            if (typeof signalR === 'undefined') {
                console.log('SignalR not loaded yet, retrying...');
                setTimeout(setupDashboardSignalR, 1000);
                return;
            }

            dashboardConnection = new signalR.HubConnectionBuilder()
                .withUrl("/realtimeDataHub")
                .build();

            dashboardConnection.start().then(function () {
                console.log("Dashboard SignalR Connected");
            }).catch(function (err) {
                console.error("Dashboard SignalR Connection Error:", err.toString());
            });

            // 이벤트 핸들러들...
            dashboardConnection.on("UpdateChannelData", function (equipmentId, channelNumber, channelData) {
                updateEquipmentChannelStatus(equipmentId, channelData);
            });

            dashboardConnection.on("NewAlarm", function (alarm) {
                updateEquipmentAlarmCount(alarm.equipmentId);
                showAlarmNotification(alarm);
            });

            dashboardConnection.onclose(function() {
                console.log("Dashboard SignalR connection closed");
                setTimeout(function() {
                    setupDashboardSignalR();
                }, 5000);
            });
        }

        // 최적화된 이벤트 등록
        $(document).ready(function() {
            // 장비 카드 클릭 이벤트 - 간단하게
            $('.equipment-card').click(function() {
                const equipmentId = $(this).data('equipment-id');
                if (equipmentId) {
                    window.location.href = '/Equipment/Detail/' + equipmentId;
                }
            });
            
            // SignalR 연결을 지연시켜서 초기 로딩 속도 향상
            setTimeout(setupDashboardSignalR, 1000);
            
            // 브라우저 알림 권한 요청을 지연
            setTimeout(function() {
                if (Notification.permission === 'default') {
                    Notification.requestPermission();
                }
            }, 2000);
        });

        function refreshData() {
            location.reload();
        }

        // 간단한 업데이트 함수들
        function updateEquipmentChannelStatus(equipmentId, channelData) {
            const equipmentCard = $(`.equipment-card[data-equipment-id="${equipmentId}"]`);
            if (equipmentCard.length) {
                equipmentCard.addClass('border-primary');
                setTimeout(() => {
                    equipmentCard.removeClass('border-primary');
                }, 1000);
            }
        }

        function updateEquipmentAlarmCount(equipmentId) {
            const equipmentCard = $(`.equipment-card[data-equipment-id="${equipmentId}"]`);
            if (equipmentCard.length) {
                let alarmIndicator = equipmentCard.find('.alarm-indicator');
                if (alarmIndicator.length === 0) {
                    alarmIndicator = $('<div class="alarm-indicator">1</div>');
                    equipmentCard.append(alarmIndicator);
                } else {
                    const currentCount = parseInt(alarmIndicator.text()) || 0;
                    alarmIndicator.text(currentCount + 1);
                }
            }
        }

        function showAlarmNotification(alarm) {
            // 간소화된 알림
            console.log('New alarm:', alarm);
        }
    </script>
}