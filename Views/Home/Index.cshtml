@using Microsoft.Extensions.Localization
@using GPIMSWeb.Resources
@using System.Reflection
@using System.Resources
@using System.Globalization
@inject IStringLocalizer<SharedResource> Localizer
@model List<Equipment>
@{
    // 직접 ResourceManager 사용하는 함수
    string GetLocalizedString(string key) 
    {
        try 
        {
            var resourceManager = new ResourceManager("GPIMSWeb.Resources.SharedResource", Assembly.GetExecutingAssembly());
            return resourceManager.GetString(key, CultureInfo.CurrentUICulture) ?? key;
        }
        catch 
        {
            return key;
        }
    }
    
    ViewData["Title"] = GetLocalizedString("Dashboard");
}

<!-- 디버깅 정보 (필요시 주석 해제) -->
@*
<div style="background: yellow; padding: 10px; margin: 10px; border: 1px solid red;">
    <strong>🐛 DEBUG INFO:</strong><br>
    Current Culture: @CultureInfo.CurrentCulture.Name<br>
    Current UI Culture: @CultureInfo.CurrentUICulture.Name<br>
    Dashboard = "@GetLocalizedString("Dashboard")"<br>
    Equipment = "@GetLocalizedString("Equipment")"<br>
</div>
*@

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="fas fa-tachometer-alt"></i> @GetLocalizedString("Dashboard")</h2>
    <div class="btn-group" role="group">
        <button type="button" class="btn btn-outline-primary" onclick="refreshData()">
            <i class="fas fa-sync-alt"></i> @GetLocalizedString("Update")
        </button>
    </div>
</div>

<div class="equipment-grid" id="equipmentGrid">
    @foreach (var equipment in Model)
    {
        <div class="equipment-card @(equipment.IsOnline ? "online" : "offline") @(equipment.Status.ToString().ToLower())" 
             data-equipment-id="@equipment.Id">
            <div class="card-body">
                @if (equipment.Alarms.Any())
                {
                    <div class="alarm-indicator">@equipment.Alarms.Count</div>
                }
                
                <div class="equipment-icon @(equipment.IsOnline ? (equipment.Status == EquipmentStatus.Running ? "running" : equipment.Status == EquipmentStatus.Error ? "error" : "online") : "offline")">
                    <i class="fas fa-@(equipment.Status == EquipmentStatus.Running ? "play" : equipment.Status == EquipmentStatus.Error ? "exclamation-triangle" : equipment.IsOnline ? "server" : "power-off")"></i>
                    <div class="status-indicator @(equipment.IsOnline ? "online" : "offline")"></div>
                </div>
                
                <h5 class="equipment-title">@equipment.Name</h5>
                <p class="equipment-subtitle">
                    @GetLocalizedString("Equipment") Station
                    <span class="version-info">
                        <i class="fas fa-tag"></i> @equipment.Version
                    </span>
                </p>
                
                <div class="status-badge @(equipment.IsOnline ? (equipment.Status == EquipmentStatus.Running ? "running" : equipment.Status == EquipmentStatus.Error ? "error" : "online") : "offline")">
                    <i class="fas fa-@(equipment.IsOnline ? "circle" : "times-circle")"></i>
                    @if (equipment.IsOnline)
                    {
                        @GetLocalizedString(equipment.Status.ToString())
                    }
                    else
                    {
                        @GetLocalizedString("Offline")
                    }
                </div>
                
                <div class="equipment-stats">
                    <div class="stat-row">
                        <span class="stat-label">@GetLocalizedString("Channels") @GetLocalizedString("Active")</span>
                        <span class="stat-value">@equipment.Channels.Count(c => c.Status == ChannelStatus.Active)/@equipment.Channels.Count</span>
                    </div>
                    @* <div class="stat-row">
                        <span class="stat-label">@GetLocalizedString("LastUpdate")</span>
                        <span class="stat-value" data-time="@equipment.LastUpdateTime.ToString("yyyy-MM-dd HH:mm:ss")">
                            @{
                                var timeAgo = DateTime.Now - equipment.LastUpdateTime;
                                string timeDisplay = "";
                                if (timeAgo.TotalMinutes < 1)
                                    timeDisplay = "Just now";
                                else if (timeAgo.TotalMinutes < 60)
                                    timeDisplay = $"{(int)timeAgo.TotalMinutes} min ago";
                                else if (timeAgo.TotalHours < 24)
                                    timeDisplay = $"{(int)timeAgo.TotalHours}h ago";
                                else
                                    timeDisplay = equipment.LastUpdateTime.ToString("MM-dd HH:mm");
                            }
                            @timeDisplay
                        </span>
                    </div> *@
                    <div class="stat-row">
                        <span class="stat-label">@GetLocalizedString("LastUpdate")</span>
                        <span class="stat-value">@equipment.LastUpdateTime.ToString("yyyy-MM-dd HH:mm:ss")</span>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (!Model.Any())
{
    <div class="text-center py-5">
        <i class="fas fa-server fa-3x text-muted mb-3"></i>
        <h4 class="text-muted">@GetLocalizedString("Equipment") @GetLocalizedString("NotFound")</h4>
        <p class="text-muted">No equipment has been configured yet.</p>
    </div>
}

<style>
    .equipment-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
        gap: 25px;
        margin-top: 20px;
    }

    .equipment-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(15px);
        border-radius: 24px;
        padding: 0;
        border: none;
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        cursor: pointer;
        position: relative;
        overflow: hidden;
        height: 300px; /* 280px → 320px로 증가 */
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    }

    .equipment-card:hover {
        transform: translateY(-12px) scale(1.02);
        box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
    }

    .equipment-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 6px;
        background: linear-gradient(90deg, #28a745, #20c997);
        border-radius: 24px 24px 0 0;
    }

    .equipment-card.offline::before {
        background: linear-gradient(90deg, #dc3545, #fd7e14);
    }

    .equipment-card.error::before {
        background: linear-gradient(90deg, #ffc107, #fd7e14);
    }

    .equipment-card.running::before {
        background: linear-gradient(90deg, #007bff, #6f42c1);
    }

    .equipment-card .card-body {
        padding: 25px;
        height: 100%;
        display: flex;
        flex-direction: column;
        position: relative;
    }

    .equipment-icon {
        width: 80px;
        height: 80px;
        border-radius: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 20px;
        position: relative;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
    }

    .equipment-icon.offline {
        background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
        box-shadow: 0 8px 25px rgba(220, 53, 69, 0.3);
    }

    .equipment-icon.error {
        background: linear-gradient(135deg, #ffc107 0%, #e0a800 100%);
        box-shadow: 0 8px 25px rgba(255, 193, 7, 0.3);
    }

    .equipment-icon.running {
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
        box-shadow: 0 8px 25px rgba(0, 123, 255, 0.3);
    }

    .equipment-icon.online {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        box-shadow: 0 8px 25px rgba(40, 167, 69, 0.3);
    }

    .equipment-icon i {
        font-size: 36px;
        color: white;
    }

    .status-indicator {
        position: absolute;
        top: -5px;
        right: -5px;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        border: 3px solid white;
        animation: pulse 2s infinite;
    }

    .status-indicator.online {
        background: #28a745;
    }

    .status-indicator.offline {
        background: #dc3545;
        animation: none;
    }

    @@keyframes pulse {
        0% { box-shadow: 0 0 0 0 rgba(40, 167, 69, 0.7); }
        70% { box-shadow: 0 0 0 10px rgba(40, 167, 69, 0); }
        100% { box-shadow: 0 0 0 0 rgba(40, 167, 69, 0); }
    }

    .equipment-title {
        font-size: 1.4rem;
        font-weight: 700;
        color: #2c3e50;
        margin-bottom: 8px;
        text-align: center;
    }

    .equipment-subtitle {
        color: #7f8c8d;
        font-size: 0.9rem;
        text-align: center;
        margin-bottom: 20px;
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .version-info {
        font-size: 0.75rem;
        color: #95a5a6;
        font-weight: 500;
    }

    .version-info i {
        margin-right: 4px;
    }

    .status-badge {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 8px 16px;
        border-radius: 50px;
        font-weight: 600;
        font-size: 0.85rem;
        margin: 0 auto 15px;
        backdrop-filter: blur(10px);
    }

    .status-badge.online {
        background: rgba(40, 167, 69, 0.15);
        color: #28a745;
        border: 1px solid rgba(40, 167, 69, 0.3);
    }

    .status-badge.offline {
        background: rgba(220, 53, 69, 0.15);
        color: #dc3545;
        border: 1px solid rgba(220, 53, 69, 0.3);
    }

    .status-badge.running {
        background: rgba(0, 123, 255, 0.15);
        color: #007bff;
        border: 1px solid rgba(0, 123, 255, 0.3);
    }

    .status-badge.error {
        background: rgba(255, 193, 7, 0.15);
        color: #ffc107;
        border: 1px solid rgba(255, 193, 7, 0.3);
    }

    .equipment-stats {
        margin-top: auto;
        padding-top: 15px;
        border-top: 1px solid rgba(0, 0, 0, 0.05);
        min-height: 100px; /* 최소 높이 보장 */
    }

    .stat-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px; /* 12px → 10px로 조정 */
        font-size: 0.82rem; /* 0.85rem → 0.82rem로 조정 */
        line-height: 1.3;
    }

    .stat-row:last-child {
        margin-bottom: 0;
    }

    .stat-label {
        color: #7f8c8d;
        font-weight: 500;
    }

    .stat-value {
        color: #2c3e50;
        font-weight: 600;
    }

    .alarm-indicator {
        position: absolute;
        top: 20px;
        right: 20px;
        background: #dc3545;
        color: white;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.75rem;
        font-weight: bold;
        animation: shake 0.5s infinite alternate;
        z-index: 10;
    }

    @@keyframes shake {
        0% { transform: translateX(0); }
        100% { transform: translateX(2px); }
    }

    .version-badge {
        display: none; /* 기존 버전 배지 숨김 */
    }

    /* Card entrance animation */
    .equipment-card {
        opacity: 0;
        animation: fadeInUp 0.6s ease forwards;
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .equipment-grid {
            grid-template-columns: 1fr;
            gap: 20px;
        }
        
        .equipment-card {
            height: 280px; /* 260px → 300px로 증가 */
        }
        
        .equipment-icon {
            width: 70px;
            height: 70px;
        }
        
        .equipment-icon i {
            font-size: 30px;
        }
        
        .equipment-title {
            font-size: 1.2rem;
        }
    }

    /* Click feedback */
    .equipment-card:active {
        transform: translateY(-8px) scale(0.98);
    }
</style>

@section Scripts {
    <script>
        let dashboardConnection;

        // SignalR 연결 설정
        function setupDashboardSignalR() {
            dashboardConnection = new signalR.HubConnectionBuilder()
                .withUrl("/realtimeDataHub")
                .build();

            dashboardConnection.start().then(function () {
                console.log("Dashboard SignalR Connected");
            }).catch(function (err) {
                console.error("Dashboard SignalR Connection Error:", err.toString());
            });

            // 채널 데이터 업데이트
            dashboardConnection.on("UpdateChannelData", function (equipmentId, channelNumber, channelData) {
                updateEquipmentChannelStatus(equipmentId, channelData);
            });

            // 새로운 알람
            dashboardConnection.on("NewAlarm", function (alarm) {
                updateEquipmentAlarmCount(alarm.equipmentId);
                showAlarmNotification(alarm);
            });

            // 연결 상태 모니터링
            dashboardConnection.onclose(function() {
                console.log("Dashboard SignalR connection closed");
                
                // 5초 후 재연결 시도
                setTimeout(function() {
                    setupDashboardSignalR();
                }, 5000);
            });
        }

        function updateEquipmentChannelStatus(equipmentId, channelData) {
            const equipmentCard = $(`.equipment-card[data-equipment-id="${equipmentId}"]`);
            if (equipmentCard.length) {
                // 장비 상태 업데이트
                updateEquipmentStatus(equipmentCard, channelData.status);
                
                // 마지막 업데이트 시간 갱신
                const timeElement = equipmentCard.find('.stat-value').last();
                timeElement.text(new Date().toLocaleString());
                
                // 활성 채널 수 업데이트 (간단한 시뮬레이션)
                updateActiveChannelCount(equipmentCard, equipmentId);
                
                // 시각적 피드백
                equipmentCard.addClass('border-primary');
                setTimeout(() => {
                    equipmentCard.removeClass('border-primary');
                }, 1000);
            }
        }

        function updateEquipmentStatus(equipmentCard, channelStatus) {
            const statusBadge = equipmentCard.find('.status-badge');
            const equipmentIcon = equipmentCard.find('.equipment-icon');
            
            // 채널이 활성 상태이면 장비도 Running으로 설정
            if (channelStatus === 1) { // Active
                statusBadge.removeClass('online offline error')
                          .addClass('running')
                          .html('<i class="fas fa-circle"></i> @GetLocalizedString("Running")');
                
                equipmentIcon.removeClass('online offline error')
                           .addClass('running');
                           
                equipmentCard.removeClass('idle error offline')
                           .addClass('running');
            }
        }

        function updateActiveChannelCount(equipmentCard, equipmentId) {
            // 실제로는 서버에서 활성 채널 수를 계산해야 하지만,
            // 여기서는 간단한 시뮬레이션으로 랜덤 업데이트
            const statValue = equipmentCard.find('.stat-value').first();
            const currentText = statValue.text();
            const [current, total] = currentText.split('/').map(s => parseInt(s.trim()));
            
            if (!isNaN(current) && !isNaN(total)) {
                // 활성 채널 수를 랜덤하게 조정 (실제로는 서버 데이터 사용)
                const newActive = Math.min(total, Math.max(0, current + (Math.random() > 0.5 ? 1 : -1)));
                statValue.text(`${newActive}/${total}`);
            }
        }

        function updateEquipmentAlarmCount(equipmentId) {
            const equipmentCard = $(`.equipment-card[data-equipment-id="${equipmentId}"]`);
            if (equipmentCard.length) {
                let alarmIndicator = equipmentCard.find('.alarm-indicator');
                
                if (alarmIndicator.length === 0) {
                    // 알람 인디케이터가 없으면 생성
                    alarmIndicator = $('<div class="alarm-indicator">1</div>');
                    equipmentCard.append(alarmIndicator);
                } else {
                    // 기존 알람 수 증가
                    const currentCount = parseInt(alarmIndicator.text()) || 0;
                    alarmIndicator.text(currentCount + 1);
                }
            }
        }

        function showAlarmNotification(alarm) {
            const levelText = alarm.level === 3 ? '@GetLocalizedString("Critical")' : 
                             alarm.level === 2 ? '@GetLocalizedString("Error")' : 
                             alarm.level === 1 ? '@GetLocalizedString("Warning")' : '@GetLocalizedString("Info")';
            
            const alertClass = alarm.level === 3 ? 'danger' : 
                             alarm.level === 2 ? 'warning' : 
                             alarm.level === 1 ? 'warning' : 'info';
            
            const alertHtml = `
                <div class="alert alert-${alertClass} alert-dismissible fade show position-fixed" 
                     style="top: 20px; right: 20px; z-index: 1050; max-width: 400px;" role="alert">
                    <div class="d-flex align-items-center">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <div>
                            <strong>@GetLocalizedString("Equipment") #${alarm.equipmentId} - ${levelText}</strong><br>
                            <small>${alarm.message}</small>
                        </div>
                    </div>
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            $('body').append(alertHtml);
            
            // 브라우저 알림 (권한이 있는 경우)
            if (Notification.permission === 'granted') {
                new Notification(`Equipment ${alarm.equipmentId} - ${levelText}`, {
                    body: alarm.message,
                    icon: '/favicon.ico'
                });
            }
            
            // 5초 후 자동 제거
            setTimeout(() => {
                $('.alert.position-fixed').first().fadeOut();
            }, 5000);
        }

        // 상대적 시간 업데이트 함수
        function updateRelativeTime() {
            $('.stat-value[data-time]').each(function() {
                const timeStr = $(this).data('time');
                const updateTime = new Date(timeStr);
                const now = new Date();
                const diffMs = now - updateTime;
                const diffMins = Math.floor(diffMs / 60000);
                const diffHours = Math.floor(diffMs / 3600000);
                const diffDays = Math.floor(diffMs / 86400000);
                
                let displayText = '';
                if (diffMins < 1) {
                    displayText = 'Just now';
                } else if (diffMins < 60) {
                    displayText = diffMins + ' min ago';
                } else if (diffHours < 24) {
                    displayText = diffHours + 'h ago';
                } else {
                    displayText = updateTime.toLocaleDateString() + ' ' + updateTime.toLocaleTimeString().slice(0, 5);
                }
                
                $(this).text(displayText);
            });
        }

        // 장비 상태 실시간 업데이트
        function updateEquipmentOnlineStatus() {
            // 최근 5분 이내에 데이터를 받은 장비는 온라인으로 표시
            $('.equipment-card').each(function() {
                const card = $(this);
                const equipmentId = card.data('equipment-id');
                const lastUpdateElement = card.find('.stat-value').last();
                const lastUpdateText = lastUpdateElement.attr('data-time');
                
                if (lastUpdateText) {
                    const lastUpdate = new Date(lastUpdateText);
                    const now = new Date();
                    const diffMinutes = (now - lastUpdate) / (1000 * 60);
                    
                    const statusIndicator = card.find('.status-indicator');
                    const equipmentIcon = card.find('.equipment-icon');
                    
                    if (diffMinutes > 5) {
                        // 5분 이상 업데이트가 없으면 오프라인으로 표시
                        statusIndicator.removeClass('online').addClass('offline');
                        equipmentIcon.removeClass('online running').addClass('offline');
                        card.removeClass('online running').addClass('offline');
                        
                        const statusBadge = card.find('.status-badge');
                        statusBadge.removeClass('online running error')
                                  .addClass('offline')
                                  .html('<i class="fas fa-times-circle"></i> @GetLocalizedString("Offline")');
                    }
                }
            });
        }

        // 장비 카드 클릭 이벤트를 jQuery로 처리
        $(document).ready(function() {
            // SignalR 연결
            setupDashboardSignalR();
            
            // 장비 카드 클릭 이벤트
            $('.equipment-card').on('click', function() {
                const equipmentId = $(this).data('equipment-id');
                
                // 클릭 피드백
                $(this).css('transform', 'scale(0.98)');
                
                setTimeout(() => {
                    $(this).css('transform', '');
                    // 상세 페이지로 이동
                    window.location.href = '/Equipment/Detail/' + equipmentId;
                }, 150);
            });
            
            // 카드 입장 애니메이션
            $('.equipment-card').each(function(index) {
                $(this).css('animation-delay', (index * 0.1) + 's');
            });
            
            // 상대적 시간 업데이트 (1분마다)
            updateRelativeTime();
            setInterval(updateRelativeTime, 60000);
            
            // 장비 온라인 상태 확인 (30초마다)
            setInterval(updateEquipmentOnlineStatus, 30000);
            
            // 브라우저 알림 권한 요청
            if (Notification.permission === 'default') {
                Notification.requestPermission();
            }
            
            // 실시간 연결 상태 표시
            setTimeout(() => {
                if (dashboardConnection && dashboardConnection.state === signalR.HubConnectionState.Connected) {
                    console.log('Real-time dashboard updates enabled');
                } else {
                    console.warn('Real-time dashboard connection failed');
                }
            }, 2000);
        });

        function refreshData() {
            location.reload();
        }

        // 페이지가 숨겨졌다가 다시 보일 때 연결 확인
        document.addEventListener('visibilitychange', function() {
            if (!document.hidden && dashboardConnection && dashboardConnection.state !== signalR.HubConnectionState.Connected) {
                console.log('Dashboard became visible, checking SignalR connection...');
                setupDashboardSignalR();
            }
        });

        // 페이지 떠날 때 연결 정리
        $(window).on('beforeunload', function() {
            if (dashboardConnection && dashboardConnection.state === signalR.HubConnectionState.Connected) {
                dashboardConnection.stop();
            }
        });

        // 주기적으로 연결 상태 확인 (1분마다)
        setInterval(function() {
            if (dashboardConnection && dashboardConnection.state === signalR.HubConnectionState.Connected) {
                console.log('Dashboard SignalR connection is healthy');
            } else {
                console.warn('Dashboard SignalR connection issue detected');
                if (dashboardConnection && dashboardConnection.state === signalR.HubConnectionState.Disconnected) {
                    setupDashboardSignalR();
                }
            }
        }, 60000);
    </script>
}