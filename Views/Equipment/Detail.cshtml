@using System.Reflection
@using System.Resources
@using System.Globalization
@model Equipment
@{
    string GetLocalizedString(string key) 
    {
        try 
        {
            var resourceManager = new ResourceManager("GPIMSWeb.Resources.SharedResource", Assembly.GetExecutingAssembly());
            return resourceManager.GetString(key, CultureInfo.CurrentUICulture) ?? key;
        }
        catch 
        {
            return key;
        }
    }
    
    ViewData["Title"] = $"{GetLocalizedString("Equipment")} {Model.Name} {GetLocalizedString("Detail")}";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="fas fa-server"></i> @Model.Name - @GetLocalizedString("RealTimeMonitoring")</h2>
    <div class="btn-group" role="group">
        <a href="@Url.Action("Index", "Home")" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left"></i> @GetLocalizedString("BackToDashboard")
        </a>
        <button type="button" class="btn btn-outline-primary" onclick="refreshData()">
            <i class="fas fa-sync-alt"></i> @GetLocalizedString("Update")
        </button>
    </div>
</div>

<!-- Equipment Status -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-circle @(Model.IsOnline ? "text-success" : "text-danger") me-2"></i>
                            <span class="fw-bold">@GetLocalizedString(Model.IsOnline ? "Online" : "Offline")</span>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <small class="text-muted">@GetLocalizedString("Status"):</small><br>
                        <span class="badge bg-@(Model.Status == EquipmentStatus.Idle ? "secondary" : Model.Status == EquipmentStatus.Running ? "primary" : "danger")">
                            @GetLocalizedString(Model.Status.ToString())
                        </span>
                    </div>
                    <div class="col-md-3">
                        <small class="text-muted">@GetLocalizedString("Version"):</small><br>
                        <span>@Model.Version</span>
                    </div>
                    <div class="col-md-3">
                        <small class="text-muted">@GetLocalizedString("LastUpdate"):</small><br>
                        <span>@Model.LastUpdateTime.ToString("yyyy-MM-dd HH:mm:ss")</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Main Channels Section with Chart -->
<div class="row mb-4">
    <!-- Channels Table (75% width) -->
    <div class="col-lg-9 mb-4">
        <div class="card" style="height: 450px;"> <!-- 카드 높이 조정 -->
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0"><i class="fas fa-list"></i> @GetLocalizedString("Channels")</h5>
                <div class="btn-group btn-group-sm justify-content-between align-items-center" role="group">
                    <button type="button" class="btn btn-outline-primary" onclick="selectAllChannels()">
                        <i class="fas fa-check-square"></i> Select All
                    </button>
                    <button type="button" class="btn btn-outline-secondary" onclick="clearChannelSelection()">
                        <i class="fas fa-square"></i> Clear
                    </button>
                    <span class="badge bg-info ms-2" id="selectedChannelsBadge" style="display: none;">
                        <span id="selectedCount">0</span> selected
                    </span>
                </div>
            </div>
            <div class="card-body p-0">
                <div class="table-container" style="height: 320px; overflow-y: auto;"> <!-- 내부 테이블 컨테이너 높이 조정 -->
                    <table class="table table-striped mb-0" id="channelsTable">
                        <thead class="table-dark sticky-top">
                            <tr>
                                <th>Ch#</th>
                                <th>@GetLocalizedString("Status")</th>
                                <th>@GetLocalizedString("Mode")</th>
                                <th>@GetLocalizedString("Voltage") (V)</th>
                                <th>@GetLocalizedString("Current") (A)</th>
                                <th>@GetLocalizedString("Capacity") (Ah)</th>
                                <th>@GetLocalizedString("Power") (W)</th>
                                <th>@GetLocalizedString("Energy") (Wh)</th>
                                <th>@GetLocalizedString("Schedule")</th>
                            </tr>
                        </thead>
                        <tbody id="channelsTableBody">
                            @foreach (var channel in Model.Channels)
                            {
                                <tr data-channel="@channel.ChannelNumber" class="channel-row" onclick="selectChannel(event, @channel.ChannelNumber)">
                                    <td class="channel-number">@channel.ChannelNumber.ToString("D2")</td>
                                    <td>
                                        <span class="badge bg-@(channel.Status == ChannelStatus.Active ? "success" : channel.Status == ChannelStatus.Error ? "danger" : "secondary")">
                                            @GetLocalizedString(channel.Status.ToString())
                                        </span>
                                    </td>
                                    <td>@GetLocalizedString(channel.Mode.ToString())</td>
                                    <td class="voltage">@channel.Voltage.ToString("F2")</td>
                                    <td class="current">@channel.Current.ToString("F2")</td>
                                    <td class="capacity">@channel.Capacity.ToString("F1")</td>
                                    <td class="power">@channel.Power.ToString("F2")</td>
                                    <td class="energy">@channel.Energy.ToString("F1")</td>
                                    <td>@(string.IsNullOrEmpty(channel.ScheduleName) ? "-" : channel.ScheduleName)</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- Channel Actions Footer -->
            <div class="card-footer" id="channelActionsFooter" style="display: none;">
                <div class="row align-items-center">
                    <div class="col">
                        <small class="text-muted">
                            <span id="channelSelectedCount">0</span> channels selected
                        </small>
                    </div>
                    <div class="col-auto">
                        <div class="btn-group btn-group-sm">
                            <button type="button" class="btn btn-success" onclick="startSelectedChannels()">
                                <i class="fas fa-play"></i> Start
                            </button>
                            <button type="button" class="btn btn-warning" onclick="pauseSelectedChannels()">
                                <i class="fas fa-pause"></i> Pause
                            </button>
                            <button type="button" class="btn btn-danger" onclick="stopSelectedChannels()">
                                <i class="fas fa-stop"></i> Stop
                            </button>
                            <button type="button" class="btn btn-info" onclick="exportSelectedChannels()">
                                <i class="fas fa-download"></i> Export
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Real-time Chart (25% width) -->
    <div class="col-lg-3 mb-4">
        <div class="card" style="height: 450px;"> <!-- 채널 카드와 동일한 높이 -->
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-chart-line"></i> @GetLocalizedString("RealTimeChart")</h5>
            </div>
            <div class="card-body">
                <div id="realtimeChart" style="height: 360px; background: #f8f9fa; border: 1px solid #ddd; border-radius: 4px;">
                    <div class="d-flex align-items-center justify-content-center h-100">
                        <div class="text-center text-muted">
                            <i class="fas fa-chart-line fa-2x mb-2"></i>
                            <div class="small">@GetLocalizedString("RealTimeDataVisualization")</div>
                            <small class="text-muted">@GetLocalizedString("ChartDescription")</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Secondary Information Row -->
<div class="row">
    <!-- CAN/LIN Data -->
    <div class="col-lg-4 mb-4">
        <div class="card" style="height: 350px;"> <!-- 하단 카드들 동일 높이 -->
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-network-wired"></i> CAN/LIN Data <span id="canLinChannelInfo" class="text-muted small"></span></h5>
            </div>
            <div class="card-body" style="height: 302px; overflow-y: auto;"> <!-- 스크롤 가능한 본문 -->
                <div id="canLinDataContent">
                    @if (Model.CanLinData.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead class="table-light">
                                    <tr>
                                        <th>@GetLocalizedString("Name")</th>
                                        <th>@GetLocalizedString("MinValue")</th>
                                        <th>@GetLocalizedString("MaxValue")</th>
                                        <th>@GetLocalizedString("CurrentValue")</th>
                                    </tr>
                                </thead>
                                <tbody id="canlinTableBody">
                                    @foreach (var canlin in Model.CanLinData)
                                    {
                                        <tr data-name="@canlin.Name" data-channel="all">
                                            <td class="fw-bold">@canlin.Name</td>
                                            <td>@canlin.MinValue.ToString("F2")</td>
                                            <td>@canlin.MaxValue.ToString("F2")</td>
                                            <td class="current-value text-primary fw-bold">@canlin.CurrentValue.ToString("F2")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-3" id="noCanLinData">
                            <i class="fas fa-network-wired fa-2x text-muted mb-2"></i>
                            <div class="text-muted">No CAN/LIN data available</div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- AUX Sensors -->
    <div class="col-lg-4 mb-4">
        <div class="card" style="height: 350px;"> <!-- 하단 카드들 동일 높이 -->
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-thermometer-half"></i> @GetLocalizedString("AuxSensors") <span id="auxChannelInfo" class="text-muted small"></span></h5>
            </div>
            <div class="card-body" style="height: 302px; overflow-y: auto;"> <!-- 스크롤 가능한 본문 -->
                <div id="auxDataContent">
                    @if (Model.AuxData.Any())
                    {
                        <div class="row" id="auxSensorGrid">
                            @foreach (var aux in Model.AuxData)
                            {
                                <div class="col-md-6 mb-3" data-channel="all">
                                    <div class="card bg-light border-0">
                                        <div class="card-body text-center p-3">
                                            <i class="fas fa-@(aux.Type == AuxDataType.Temperature ? "thermometer-half text-warning" : aux.Type == AuxDataType.Voltage ? "bolt text-primary" : "microchip text-info") fa-lg mb-2"></i>
                                            <div class="small fw-bold">@aux.Name</div>
                                            <div class="h5 text-primary mb-1" data-aux="@aux.SensorId">
                                                @aux.Value.ToString("F1")@(aux.Type == AuxDataType.Temperature ? "°C" : aux.Type == AuxDataType.Voltage ? "V" : "Ω")
                                            </div>
                                            <small class="text-muted">@aux.LastUpdateTime.ToString("HH:mm:ss")</small>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-3" id="noAuxData">
                            <i class="fas fa-thermometer-half fa-2x text-muted mb-2"></i>
                            <div class="text-muted">No AUX sensor data available</div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Alarms -->
    <div class="col-lg-4 mb-4">
        <div class="card" style="height: 350px;"> <!-- 하단 카드들 동일 높이 -->
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="fas fa-exclamation-triangle"></i> @GetLocalizedString("Alarms")
                </h5>
                @if (Model.Alarms.Any())
                {
                    <span class="badge bg-danger">@Model.Alarms.Count</span>
                }
            </div>
            <div class="card-body" style="height: 302px; overflow-y: auto;"> <!-- 스크롤 가능한 본문 -->
                <div id="alarmsContainer">
                    @foreach (var alarm in Model.Alarms)
                    {
                        <div class="alert alert-@(alarm.Level == AlarmLevel.Critical ? "danger" : alarm.Level == AlarmLevel.Error ? "warning" : "info") alert-sm mb-2" data-alarm="@alarm.Id">
                            <div class="d-flex justify-content-between align-items-start">
                                <div class="flex-grow-1">
                                    <div class="fw-bold">@GetLocalizedString(alarm.Level.ToString())</div>
                                    <div class="small">@alarm.Message</div>
                                    <div class="text-muted small">@alarm.CreatedAt.ToString("MM-dd HH:mm")</div>
                                </div>
                                <button class="btn btn-sm btn-outline-danger ms-2" onclick="clearAlarm(@alarm.Id)">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                    }
                </div>
                @if (!Model.Alarms.Any())
                {
                    <div class="text-center py-3">
                        <i class="fas fa-check-circle fa-2x text-success mb-2"></i>
                        <div class="text-success fw-bold">@GetLocalizedString("NoActiveAlarms")</div>
                        <small class="text-muted">@GetLocalizedString("AllSystemsNormal")</small>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
    .table-container {
        border-radius: 8px;
    }

    .table-container::-webkit-scrollbar {
        width: 8px;
    }

    .table-container::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 4px;
    }

    .table-container::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 4px;
    }

    .table-container::-webkit-scrollbar-thumb:hover {
        background: #a8a8a8;
    }

    .sticky-top {
        position: sticky;
        top: 0;
        z-index: 10;
    }

    .alert-sm {
        padding: 0.5rem;
        font-size: 0.875rem;
    }
    
    .card {
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border: none;
    }
    
    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }
    
    .table th {
        font-weight: 600;
        font-size: 0.875rem;
    }
    
    .table td {
        font-size: 0.875rem;
        vertical-align: middle;
    }
    
    .table-sm th,
    .table-sm td {
        padding: 0.5rem;
    }
    
    #channelsTable tbody tr:hover {
        background-color: rgba(0,123,255,0.1);
    }
    
    .channel-row.selected {
        background-color: rgba(13, 110, 253, 0.2) !important;
        border-left: 4px solid #0d6efd;
        color: #000;
    }
    
    .channel-row {
        cursor: pointer;
        transition: all 0.2s ease;
        user-select: none;
    }
    
    .channel-row:hover {
        background-color: rgba(0,123,255,0.1) !important;
    }
    
    .channel-row.selected:hover {
        background-color: rgba(13, 110, 253, 0.25) !important;
    }
    
    .table tbody tr.selected td {
        background-color: transparent;
    }
    
    .card-footer {
        background-color: #f8f9fa;
        border-top: 1px solid #dee2e6;
        padding: 0.75rem 1rem;
    }
    
    .btn-group-sm .btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }
    
    .equipment-status-badge {
        font-size: 0.75rem;
        padding: 0.35rem 0.65rem;
    }
    
    .channel-row {
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .channel-row:hover {
        background-color: rgba(0,123,255,0.05) !important;
    }
</style>

@section Scripts {
    <script>
        const equipmentId = @Model.Id;
        let connection;

        // SignalR 연결 설정
        function setupSignalR() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/realtimeDataHub")
                .build();

            connection.start().then(function () {
                console.log("SignalR Connected for Equipment Detail");
                connection.invoke("JoinEquipmentGroup", equipmentId.toString());
            }).catch(function (err) {
                console.error("SignalR Connection Error:", err.toString());
                showNotification("Real-time connection failed", "warning");
            });

            // 전체 채널 데이터 업데이트 (장비별)
            connection.on("UpdateChannelData", function (updateEquipmentId, channelNumber, channelData) {
                if (updateEquipmentId === equipmentId) {
                    updateChannelRow(channelNumber, channelData);
                }
            });

            // CAN/LIN 데이터 업데이트 (장비별)
            connection.on("UpdateCanLinData", function (updateEquipmentId, name, canLinData) {
                if (updateEquipmentId === equipmentId) {
                    updateCanLinRow(name, canLinData);
                }
            });

            // AUX 데이터 업데이트 (장비별)
            connection.on("UpdateAuxData", function (updateEquipmentId, sensorId, auxData) {
                if (updateEquipmentId === equipmentId) {
                    updateAuxData(sensorId, auxData);
                }
            });

            // 새로운 알람
            connection.on("NewAlarm", function (alarm) {
                if (alarm.equipmentId === equipmentId) {
                    addNewAlarm(alarm);
                }
            });

            // 연결 상태 모니터링
            connection.onclose(function() {
                console.log("SignalR connection closed");
                showNotification("Real-time connection lost. Attempting to reconnect...", "warning");
                
                // 5초 후 재연결 시도
                setTimeout(function() {
                    setupSignalR();
                }, 5000);
            });
        }

        function updateChannelRow(channelNumber, data) {
            const row = $(`tr[data-channel="${channelNumber}"]`);
            if (row.length) {
                // 숫자 값들 업데이트
                row.find('.voltage').text(data.voltage.toFixed(2));
                row.find('.current').text(data.current.toFixed(2));
                row.find('.capacity').text(data.capacity.toFixed(1));
                row.find('.power').text(data.power.toFixed(2));
                row.find('.energy').text(data.energy.toFixed(1));
                
                // 상태 배지 업데이트
                const statusBadge = row.find('.badge');
                statusBadge.removeClass('bg-success bg-danger bg-secondary bg-warning');
                
                let statusText = '';
                let statusClass = '';
                
                switch (data.status) {
                    case 0: // Idle
                        statusText = '@GetLocalizedString("Idle")';
                        statusClass = 'bg-secondary';
                        break;
                    case 1: // Active
                        statusText = '@GetLocalizedString("Active")';
                        statusClass = 'bg-success';
                        break;
                    case 2: // Error
                        statusText = '@GetLocalizedString("Error")';
                        statusClass = 'bg-danger';
                        break;
                    case 3: // Pause
                        statusText = '@GetLocalizedString("Pause")';
                        statusClass = 'bg-warning';
                        break;
                    default:
                        statusText = 'Unknown';
                        statusClass = 'bg-secondary';
                }
                
                statusBadge.addClass(statusClass).text(statusText);
                
                // 모드 업데이트
                const modeCell = row.find('td:nth-child(3)'); // Mode column
                let modeText = '';
                switch (data.mode) {
                    case 0: modeText = '@GetLocalizedString("Rest")'; break;
                    case 1: modeText = '@GetLocalizedString("Charge")'; break;
                    case 2: modeText = '@GetLocalizedString("Discharge")'; break;
                    case 3: modeText = '@GetLocalizedString("CV")'; break;
                    case 4: modeText = '@GetLocalizedString("CC")'; break;
                    default: modeText = 'Unknown';
                }
                modeCell.text(modeText);
                
                // 스케줄 이름 업데이트
                const scheduleCell = row.find('td:last-child');
                scheduleCell.text(data.scheduleName || '-');
                
                // 시각적 피드백 - 업데이트된 행 강조
                row.addClass('table-info');
                setTimeout(() => {
                    row.removeClass('table-info');
                }, 1000);
                
                // 애니메이션 효과
                row.css('background-color', '#d4edda');
                setTimeout(() => {
                    row.css('background-color', '');
                }, 500);
                
                console.log(`Channel ${channelNumber} updated:`, data);
            }
        }

        function updateCanLinRow(name, data) {
            // CAN/LIN 데이터를 이름으로 찾아서 업데이트
            const row = $(`#canlinTableBody tr`).filter(function() {
                return $(this).find('td:first').text().trim() === name;
            });
            
            if (row.length) {
                row.find('td:nth-child(2)').text(data.minValue.toFixed(2));
                row.find('td:nth-child(3)').text(data.maxValue.toFixed(2));
                row.find('.current-value').text(data.currentValue.toFixed(2));
                
                // 업데이트 강조 효과
                row.find('.current-value').addClass('text-warning fw-bold');
                setTimeout(() => {
                    row.find('.current-value').removeClass('text-warning').addClass('text-primary');
                }, 500);
                
                console.log(`CAN/LIN ${name} updated:`, data);
            } else {
                // 새로운 CAN/LIN 데이터가 추가된 경우
                addNewCanLinRow(name, data);
            }
        }

        function addNewCanLinRow(name, data) {
            const newRow = `
                <tr data-name="${name}" data-channel="all">
                    <td class="fw-bold">${name}</td>
                    <td>${data.minValue.toFixed(2)}</td>
                    <td>${data.maxValue.toFixed(2)}</td>
                    <td class="current-value text-primary fw-bold">${data.currentValue.toFixed(2)}</td>
                </tr>
            `;
            
            if ($('#canlinTableBody').length === 0) {
                // 테이블이 없으면 생성
                const tableHtml = `
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead class="table-light">
                                <tr>
                                    <th>@GetLocalizedString("Name")</th>
                                    <th>@GetLocalizedString("MinValue")</th>
                                    <th>@GetLocalizedString("MaxValue")</th>
                                    <th>@GetLocalizedString("CurrentValue")</th>
                                </tr>
                            </thead>
                            <tbody id="canlinTableBody">
                                ${newRow}
                            </tbody>
                        </table>
                    </div>
                `;
                $('#canLinDataContent').html(tableHtml);
                $('#noCanLinData').hide();
            } else {
                $('#canlinTableBody').append(newRow);
            }
        }

        function updateAuxData(sensorId, data) {
            const element = $(`[data-aux="${sensorId}"]`);
            if (element.length) {
                // 타입에 따른 단위 설정
                let unit = '';
                switch (data.type) {
                    case 0: unit = 'V'; break;  // Voltage
                    case 1: unit = '°C'; break; // Temperature
                    case 2: unit = 'Ω'; break;  // NTC
                    default: unit = '';
                }
                
                element.text(data.value.toFixed(1) + unit);
                
                // 업데이트 강조 효과
                element.addClass('text-warning');
                setTimeout(() => {
                    element.removeClass('text-warning').addClass('text-primary');
                }, 500);
                
                // 타임스탬프 업데이트
                const timestampElement = element.closest('.card-body').find('small:last');
                timestampElement.text(new Date().toLocaleTimeString());
                
                console.log(`AUX ${sensorId} (${data.name}) updated:`, data);
            } else {
                // 새로운 AUX 센서가 추가된 경우
                addNewAuxSensor(sensorId, data);
            }
        }

        function addNewAuxSensor(sensorId, data) {
            let unit = '';
            let iconClass = '';
            
            switch (data.type) {
                case 0: // Voltage
                    unit = 'V';
                    iconClass = 'bolt text-primary';
                    break;
                case 1: // Temperature
                    unit = '°C';
                    iconClass = 'thermometer-half text-warning';
                    break;
                case 2: // NTC
                    unit = 'Ω';
                    iconClass = 'microchip text-info';
                    break;
                default:
                    unit = '';
                    iconClass = 'question text-muted';
            }
            
            const newSensor = `
                <div class="col-md-6 mb-3" data-channel="all">
                    <div class="card bg-light border-0">
                        <div class="card-body text-center p-3">
                            <i class="fas fa-${iconClass} fa-lg mb-2"></i>
                            <div class="small fw-bold">${data.name}</div>
                            <div class="h5 text-primary mb-1" data-aux="${sensorId}">
                                ${data.value.toFixed(1)}${unit}
                            </div>
                            <small class="text-muted">${new Date().toLocaleTimeString()}</small>
                        </div>
                    </div>
                </div>
            `;
            
            if ($('#auxSensorGrid').length === 0) {
                // 그리드가 없으면 생성
                const gridHtml = `<div class="row" id="auxSensorGrid">${newSensor}</div>`;
                $('#auxDataContent').html(gridHtml);
                $('#noAuxData').hide();
            } else {
                $('#auxSensorGrid').append(newSensor);
            }
        }

        function addNewAlarm(alarm) {
            let alertClass = '';
            let levelText = '';
            
            switch (alarm.level) {
                case 0: // Info
                    alertClass = 'info';
                    levelText = '@GetLocalizedString("Info")';
                    break;
                case 1: // Warning
                    alertClass = 'warning';
                    levelText = '@GetLocalizedString("Warning")';
                    break;
                case 2: // Error
                    alertClass = 'warning'; // Bootstrap doesn't have alert-error
                    levelText = '@GetLocalizedString("Error")';
                    break;
                case 3: // Critical
                    alertClass = 'danger';
                    levelText = '@GetLocalizedString("Critical")';
                    break;
                default:
                    alertClass = 'info';
                    levelText = 'Unknown';
            }
            
            const alarmHtml = `
                <div class="alert alert-${alertClass} alert-sm mb-2" data-alarm="${alarm.id}">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="flex-grow-1">
                            <div class="fw-bold">${levelText}</div>
                            <div class="small">${alarm.message}</div>
                            <div class="text-muted small">${new Date(alarm.createdAt).toLocaleString()}</div>
                        </div>
                        <button class="btn btn-sm btn-outline-danger ms-2" onclick="clearAlarm(${alarm.id})">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            `;
            
            $('#alarmsContainer').prepend(alarmHtml);
            updateAlarmBadge();
            
            // 알람 카드 강조
            $('.card:has(#alarmsContainer)').addClass('border-danger');
            setTimeout(() => {
                $('.card:has(#alarmsContainer)').removeClass('border-danger');
            }, 3000);
            
            // 브라우저 알림 (권한이 있는 경우)
            if (Notification.permission === 'granted') {
                new Notification(`Equipment ${alarm.equipmentId} - ${levelText}`, {
                    body: alarm.message,
                    icon: '/favicon.ico'
                });
            }
            
            console.log('New alarm received:', alarm);
        }

        function clearAlarm(alarmId) {
            $.post('@Url.Action("ClearAlarm", "Equipment")', { alarmId: alarmId })
                .done(function(response) {
                    if (response.success) {
                        $(`[data-alarm="${alarmId}"]`).fadeOut(300, function() {
                            $(this).remove();
                            updateAlarmBadge();
                        });
                        showNotification('Alarm cleared successfully', 'success');
                    } else {
                        showNotification('@GetLocalizedString("FailedToClearAlarm")', 'danger');
                    }
                })
                .fail(function() {
                    showNotification('@GetLocalizedString("ErrorClearingAlarm")', 'danger');
                });
        }

        function updateAlarmBadge() {
            const alarmCount = $('#alarmsContainer .alert').length;
            const badge = $('.card-header:has(#alarmsContainer) .badge');
            if (alarmCount > 0) {
                badge.text(alarmCount).show();
            } else {
                badge.hide();
                // 알람이 없을 때 메시지 표시
                if (alarmCount === 0) {
                    $('#alarmsContainer').html(`
                        <div class="text-center py-3">
                            <i class="fas fa-check-circle fa-2x text-success mb-2"></i>
                            <div class="text-success fw-bold">@GetLocalizedString("NoActiveAlarms")</div>
                            <small class="text-muted">@GetLocalizedString("AllSystemsNormal")</small>
                        </div>
                    `);
                }
            }
        }

        // 기존 채널 선택 관련 함수들...
        let selectedChannels = [];
        let lastSelectedChannel = null;

        function selectChannel(event, channelNumber) {
            event.preventDefault();
            
            if (event.shiftKey && lastSelectedChannel !== null) {
                selectChannelRange(lastSelectedChannel, channelNumber);
            } else if (event.ctrlKey || event.metaKey) {
                toggleChannelSelection(channelNumber);
            } else {
                selectedChannels = [channelNumber];
                lastSelectedChannel = channelNumber;
                updateChannelDisplay();
            }
        }
        
        function toggleChannelSelection(channelNumber) {
            const index = selectedChannels.indexOf(channelNumber);
            if (index > -1) {
                selectedChannels.splice(index, 1);
            } else {
                selectedChannels.push(channelNumber);
            }
            lastSelectedChannel = channelNumber;
            updateChannelDisplay();
        }
        
        function selectChannelRange(start, end) {
            const startNum = Math.min(start, end);
            const endNum = Math.max(start, end);
            
            // 범위 내의 모든 채널을 선택
            for (let i = startNum; i <= endNum; i++) {
                if (!selectedChannels.includes(i)) {
                    selectedChannels.push(i);
                }
            }
            
            lastSelectedChannel = end;
            updateChannelDisplay();
        }
        
        function selectAllChannels() {
            selectedChannels = [];
            $('.channel-row').each(function() {
                const channelNum = parseInt($(this).data('channel'));
                selectedChannels.push(channelNum);
            });
            lastSelectedChannel = selectedChannels[selectedChannels.length - 1];
            updateChannelDisplay();
        }
        
        function clearChannelSelection() {
            selectedChannels = [];
            lastSelectedChannel = null;
            updateChannelDisplay();
        }
        
        function updateChannelDisplay() {
            // 모든 행의 선택 상태 초기화
            $('.channel-row').removeClass('selected');
            
            // 선택된 채널들 강조
            selectedChannels.forEach(channelNum => {
                $(`.channel-row[data-channel="${channelNum}"]`).addClass('selected');
            });
            
            // 선택된 채널 수 업데이트
            $('#selectedCount').text(selectedChannels.length);
            $('#channelSelectedCount').text(selectedChannels.length);
            
            // UI 표시/숨김
            if (selectedChannels.length > 0) {
                $('#channelActionsFooter').slideDown();
                $('#selectedChannelsBadge').show();
            } else {
                $('#channelActionsFooter').slideUp();
                $('#selectedChannelsBadge').hide();
            }
            
            // 선택된 채널에 따른 CAN/LIN 및 AUX 데이터 필터링
            updateRelatedData();
        }
        
        function updateRelatedData() {
            if (selectedChannels.length === 0) {
                // 선택된 채널이 없으면 모든 데이터 표시
                showAllCanLinData();
                showAllAuxData();
                $('#canLinChannelInfo').text('');
                $('#auxChannelInfo').text('');
            } else if (selectedChannels.length === 1) {
                // 단일 채널 선택 시 해당 채널 데이터만 표시
                const channelNum = selectedChannels[0];
                showChannelCanLinData(channelNum);
                showChannelAuxData(channelNum);
                $('#canLinChannelInfo').text(`(Channel ${channelNum})`);
                $('#auxChannelInfo').text(`(Channel ${channelNum})`);
            } else {
                // 다중 채널 선택 시 모든 데이터 표시하되 헤더에 정보 표시
                showAllCanLinData();
                showAllAuxData();
                $('#canLinChannelInfo').text(`(${selectedChannels.length} channels selected)`);
                $('#auxChannelInfo').text(`(${selectedChannels.length} channels selected)`);
            }
        }
        
        function showChannelCanLinData(channelNum) {
            // 실제 구현에서는 채널별 CAN/LIN 데이터를 필터링
            // 여기서는 시뮬레이션으로 일부 데이터만 표시
            const channelSpecificData = [
                { name: `CH${channelNum}_Voltage`, min: 0, max: 5, current: (3.7 + channelNum * 0.1).toFixed(2) },
                { name: `CH${channelNum}_Current`, min: 0, max: 3, current: (1.5 + channelNum * 0.2).toFixed(2) },
                { name: `CH${channelNum}_Status`, min: 0, max: 1, current: channelNum <= 4 ? "1" : "0" }
            ];
            
            let tableHtml = `
                <div class="table-responsive">
                    <table class="table table-sm">
                        <thead class="table-light">
                            <tr>
                                <th>Name</th>
                                <th>Min</th>
                                <th>Max</th>
                                <th>Current</th>
                            </tr>
                        </thead>
                        <tbody>
            `;
            
            channelSpecificData.forEach(data => {
                tableHtml += `
                    <tr>
                        <td class="fw-bold">${data.name}</td>
                        <td>${data.min}</td>
                        <td>${data.max}</td>
                        <td class="current-value text-primary fw-bold">${data.current}</td>
                    </tr>
                `;
            });
            
            tableHtml += '</tbody></table></div>';
            $('#canLinDataContent').html(tableHtml);
        }
        
        function showChannelAuxData(channelNum) {
            // 실제 구현에서는 채널별 AUX 데이터를 필터링
            // 여기서는 시뮬레이션으로 채널별 센서 데이터 표시
            const auxSensors = [
                { name: `CH${channelNum} Temp`, type: 'Temperature', value: (25 + channelNum * 2).toFixed(1), unit: '°C', icon: 'thermometer-half text-warning' },
                { name: `CH${channelNum} NTC`, type: 'NTC', value: (1000 + channelNum * 50).toFixed(0), unit: 'Ω', icon: 'microchip text-info' }
            ];
            
            let auxHtml = '<div class="row" id="auxSensorGrid">';
            auxSensors.forEach(sensor => {
                auxHtml += `
                    <div class="col-md-6 mb-3">
                        <div class="card bg-light border-0">
                            <div class="card-body text-center p-3">
                                <i class="fas fa-${sensor.icon} fa-lg mb-2"></i>
                                <div class="small fw-bold">${sensor.name}</div>
                                <div class="h5 text-primary mb-1">${sensor.value}${sensor.unit}</div>
                                <small class="text-muted">${new Date().toLocaleTimeString()}</small>
                            </div>
                        </div>
                    </div>
                `;
            });
            auxHtml += '</div>';
            
            $('#auxDataContent').html(auxHtml);
        }
        
        function showAllCanLinData() {
            // 원래 모든 CAN/LIN 데이터 표시
            $('#canlinTableBody tr').show();
        }
        
        function showAllAuxData() {
            // 원래 모든 AUX 데이터 표시
            $('#auxSensorGrid > div').show();
        }

        // 채널 액션 함수들
        function startSelectedChannels() {
            if (selectedChannels.length === 0) {
                showNotification('Please select channels first', 'warning');
                return;
            }
            
            if (confirm(`Start operation for ${selectedChannels.length} selected channels?`)) {
                selectedChannels.forEach(channelNum => {
                    // 실제 API 호출로 대체 가능
                    console.log(`Starting channel ${channelNum}`);
                    
                    // UI 업데이트 - 상태 배지를 Active로 변경
                    const row = $(`.channel-row[data-channel="${channelNum}"]`);
                    const badge = row.find('.badge');
                    badge.removeClass('bg-secondary bg-danger').addClass('bg-success').text('@GetLocalizedString("Active")');
                });
                showNotification(`Started ${selectedChannels.length} channels`, 'success');
            }
        }
        
        function pauseSelectedChannels() {
            if (selectedChannels.length === 0) {
                showNotification('Please select channels first', 'warning');
                return;
            }
            
            if (confirm(`Pause operation for ${selectedChannels.length} selected channels?`)) {
                selectedChannels.forEach(channelNum => {
                    console.log(`Pausing channel ${channelNum}`);
                    
                    // UI 업데이트 - 상태 배지를 Pause로 변경
                    const row = $(`.channel-row[data-channel="${channelNum}"]`);
                    const badge = row.find('.badge');
                    badge.removeClass('bg-success bg-danger').addClass('bg-secondary').text('@GetLocalizedString("Pause")');
                });
                showNotification(`Paused ${selectedChannels.length} channels`, 'warning');
            }
        }
        
        function stopSelectedChannels() {
            if (selectedChannels.length === 0) {
                showNotification('Please select channels first', 'warning');
                return;
            }
            
            if (confirm(`Stop operation for ${selectedChannels.length} selected channels? This action cannot be undone.`)) {
                selectedChannels.forEach(channelNum => {
                    console.log(`Stopping channel ${channelNum}`);
                    
                    // UI 업데이트 - 상태 배지를 Idle로 변경
                    const row = $(`.channel-row[data-channel="${channelNum}"]`);
                    const badge = row.find('.badge');
                    badge.removeClass('bg-success bg-danger').addClass('bg-secondary').text('@GetLocalizedString("Idle")');
                    
                    // 데이터 초기화
                    row.find('.current').text('0.00');
                    row.find('.power').text('0.00');
                    row.find('.energy').text('0.0');
                });
                showNotification(`Stopped ${selectedChannels.length} channels`, 'danger');
            }
        }
        
        function exportSelectedChannels() {
            if (selectedChannels.length === 0) {
                showNotification('Please select channels first', 'warning');
                return;
            }
            
            // 선택된 채널 데이터 수집
            const channelData = [];
            selectedChannels.forEach(channelNum => {
                const row = $(`.channel-row[data-channel="${channelNum}"]`);
                const data = {
                    channel: channelNum,
                    status: row.find('.badge').text().trim(),
                    voltage: row.find('.voltage').text(),
                    current: row.find('.current').text(),
                    capacity: row.find('.capacity').text(),
                    power: row.find('.power').text(),
                    energy: row.find('.energy').text()
                };
                channelData.push(data);
            });
            
            // CSV 형태로 다운로드
            downloadChannelDataCSV(channelData);
            showNotification(`Exported data for ${selectedChannels.length} channels`, 'success');
        }
        
        function downloadChannelDataCSV(data) {
            const headers = ['Channel', 'Status', 'Voltage(V)', 'Current(A)', 'Capacity(Ah)', 'Power(W)', 'Energy(Wh)'];
            const csvContent = [
                headers.join(','),
                ...data.map(row => [
                    row.channel,
                    row.status,
                    row.voltage,
                    row.current,
                    row.capacity,
                    row.power,
                    row.energy
                ].join(','))
            ].join('\n');
            
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', `equipment_${equipmentId}_channels_${new Date().toISOString().slice(0, 10)}.csv`);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        function refreshData() {
            location.reload();
        }

        function showNotification(message, type) {
            const alertHtml = `
                <div class="alert alert-${type} alert-dismissible fade show position-fixed" style="top: 20px; right: 20px; z-index: 1050; max-width: 350px;" role="alert">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'danger' ? 'exclamation-triangle' : type === 'warning' ? 'exclamation-triangle' : 'info-circle'} me-2"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            $('body').append(alertHtml);
            
            setTimeout(() => {
                $('.alert.position-fixed').fadeOut();
            }, 5000);
        }

        // 이벤트 리스너 추가
        $(document).ready(function() {
            // SignalR 연결
            setupSignalR();
            
            // 키보드 이벤트 방지 (테이블에서 텍스트 선택 방지)
            $(document).on('selectstart', '.channel-row', function(e) {
                if (e.shiftKey) {
                    e.preventDefault();
                }
            });
            
            // 초기 상태 설정
            updateChannelDisplay();
            
            // 브라우저 알림 권한 요청
            if (Notification.permission === 'default') {
                Notification.requestPermission();
            }
            
            // 연결 상태 표시
            showNotification('Connecting to real-time data...', 'info');
            
            // 도움말 표시
            setTimeout(() => {
                showNotification('Tip: Click to select, Ctrl+Click for multiple, Shift+Click for range selection', 'info');
            }, 2000);
            
            // 주기적으로 연결 상태 확인 (30초마다)
            setInterval(function() {
                if (connection && connection.state === signalR.HubConnectionState.Connected) {
                    console.log('SignalR connection is healthy');
                } else {
                    console.warn('SignalR connection issue detected');
                    showNotification('Connection issue detected. Attempting to reconnect...', 'warning');
                    if (connection && connection.state === signalR.HubConnectionState.Disconnected) {
                        setupSignalR();
                    }
                }
            }, 30000);
        });

        // 페이지 떠날 때 그룹에서 나가기
        $(window).on('beforeunload', function() {
            if (connection && connection.state === signalR.HubConnectionState.Connected) {
                connection.invoke("LeaveEquipmentGroup", equipmentId.toString());
            }
        });

        // 페이지가 숨겨졌다가 다시 보일 때 연결 확인
        document.addEventListener('visibilitychange', function() {
            if (!document.hidden && connection && connection.state !== signalR.HubConnectionState.Connected) {
                console.log('Page became visible, checking SignalR connection...');
                setupSignalR();
            }
        });
    </script>
}