using GPIMSWeb.Data;
using GPIMSWeb.Services;
using GPIMSWeb.Hubs;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Localization;
using System.Globalization;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container
builder.Services.AddControllersWithViews()
    .AddViewLocalization()
    .AddDataAnnotationsLocalization();

// Entity Framework with optimized settings
builder.Services.AddDbContext<ApplicationDbContext>(options =>
{
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection"), sqlOptions =>
    {
        sqlOptions.CommandTimeout(30);
        sqlOptions.EnableRetryOnFailure(3);
    });
    // Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎßå ÎØºÍ∞êÌïú Îç∞Ïù¥ÌÑ∞ Î°úÍπÖ ÎπÑÌôúÏÑ±Ìôî
    if (builder.Environment.IsDevelopment())
    {
        options.EnableSensitiveDataLogging(false); // Ïù¥ Î∂ÄÎ∂ÑÏùÑ falseÎ°ú Î≥ÄÍ≤Ω
        options.EnableDetailedErrors(false); // Ïù¥ Î∂ÄÎ∂ÑÎèÑ falseÎ°ú Î≥ÄÍ≤Ω
    }
}, ServiceLifetime.Scoped);

// Authentication
builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
    .AddCookie(options =>
    {
        options.LoginPath = "/Account/Login";
        options.LogoutPath = "/Account/Logout";
        options.ExpireTimeSpan = TimeSpan.FromHours(8);
    });

// SignalR
builder.Services.AddSignalR();

// Services
builder.Services.AddScoped<IUserService, UserService>();
builder.Services.AddScoped<IEquipmentService, EquipmentService>();
builder.Services.AddSingleton<IRealtimeDataService, RealtimeDataService>();
builder.Services.AddScoped<IDataSeederService, DataSeederService>();

// Localization
builder.Services.AddLocalization(options => options.ResourcesPath = "Resources");

builder.Services.Configure<RequestLocalizationOptions>(options =>
{
    var supportedCultures = new[]
    {
        new CultureInfo("en"),
        new CultureInfo("ko"), 
        new CultureInfo("zh")
    };

    options.DefaultRequestCulture = new RequestCulture("en");
    options.SupportedCultures = supportedCultures;
    options.SupportedUICultures = supportedCultures;
    
    options.RequestCultureProviders.Clear();
    options.RequestCultureProviders.Add(new CookieRequestCultureProvider());
    options.RequestCultureProviders.Add(new QueryStringRequestCultureProvider());
    options.RequestCultureProviders.Add(new AcceptLanguageHeaderRequestCultureProvider());
});

var app = builder.Build();

// Configure the HTTP request pipeline
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}
else
{
    // Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑú CORS ÌóàÏö© (ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÌÖåÏä§Ìä∏Ïö©)
    app.UseCors(policy => policy
        .AllowAnyOrigin()
        .AllowAnyMethod()
        .AllowAnyHeader());
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.UseRequestLocalization();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Account}/{action=Login}/{id?}");

app.MapHub<RealtimeDataHub>("/realtimeDataHub");

// Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏãúÏûë Ïãú Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî - Î∞±Í∑∏ÎùºÏö¥ÎìúÎ°ú Ïã§Ìñâ
if (app.Environment.IsDevelopment())
{
    // Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ïã§ÌñâÌïòÏó¨ ÏãúÏûë ÏãúÍ∞Ñ Îã®Ï∂ï
    _ = Task.Run(async () =>
    {
        await Task.Delay(2000); // 2Ï¥à ÌõÑÏóê Ïã§Ìñâ
        using var scope = app.Services.CreateScope();
        var seederService = scope.ServiceProvider.GetRequiredService<IDataSeederService>();
        try
        {
            await seederService.SeedChannelDataAsync();
            var logger = scope.ServiceProvider.GetRequiredService<ILogger<Program>>();
            logger.LogInformation("‚úÖ Channel data synchronized in background");
        }
        catch (Exception ex)
        {
            var logger = scope.ServiceProvider.GetRequiredService<ILogger<Program>>();
            logger.LogError(ex, "‚ùå Error synchronizing channel data in background");
        }
    });
}

// Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑú API ÏóîÎìúÌè¨Ïù∏Ìä∏ Ï†ïÎ≥¥ Ï∂úÎ†• - Í∞ÑÏÜåÌôî
if (app.Environment.IsDevelopment())
{
    var logger = app.Services.GetRequiredService<ILogger<Program>>();
    logger.LogInformation("üöÄ GPIMSWeb Server Started");
    logger.LogInformation("üåê Web Interface: https://localhost:7090");
}

app.Run();